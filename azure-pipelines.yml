name: Azure Pipelines

trigger:
- main


variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'testenv'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'project3'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
        
# Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'AzureDevOps2'
        backendAzureRmStorageAccountName: 'tfstate250811811'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # ToDo: Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

# OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    
    #--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Install Newman Reporter
      inputs:
        script: 'sudo npm install -g newman-reporter-junitfull' 
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory and the newman scripts
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: newman run DV_suite.json -e postman_env.json -r cli,junitfull --reporter-junitfull-export TEST-JUnitReport-data-validation.xml   # ToDo: Write your commands
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'    
    # Postman Regression Test Suite    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: newman run RT_suite.json -e postman_env.json -r cli,junitfull --reporter-junitfull-export TEST-JUnitReport-regression-test.xml   # ToDo: Write your commands
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*.xml'
    #   searchFolder:    
        mergeTestResults: true
        testRunTitle: 'Publish postman test result'
        
        
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # FakeRestAPI - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload FakeRestApi'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetestsuite.zip'
    # JMeter Test Suite - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetestsuite.zip'
      displayName: 'Upload Jmeter Performance Test Suite'
      artifact: drop-performancetestsuite        

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
#- stage: Deploy
#  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  #- deployment: FakeRestAPI
  # pool:        
  #    vmImage: 'Ubuntu-latest'      
  #  environment: project3
  #  strategy:
  #    runOnce:
  #      deploy:
  #        steps:
  #        - task: AzureWebApp@1
  #          displayName: Deploy Azure WebApp
  #          inputs:
  #           azureSubscription: 'testenv'
              #ResourceGroupName: 'appsvc_windows_centralus'
  #           appName: 'myFakeWebApp2'
  #            appType: webApp
  #            package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
  #            deploymentMethod: zipDeploy


#--------------------------------------------#  
# TEST STAGE
#--------------------------------------------# 
- stage: Testing
  jobs:
  - job: PerformanceTest
    displayName: JMeter Testing
    steps:
        - bash: |
            sudo apt-get update -y
            sudo apt-get install default-jre-headless -y
            java -version
            if ! command -v apache-jmeter-5.5/bin/jmeter &> /dev/null
            then
              curl -O https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz
              tar xzvf apache-jmeter-5.5.tgz
            fi
            mkdir -p testing/jmeter
          displayName: JMeter Installation
        - bash: |
            apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/Starter.jmx \
                                        -l testing/jmeter/starterresults.csv \
                                        -e -f -o testing/jmeter \
                                        -j testing/jmeter/stress-test.log
          displayName: Stress Test
        
        - task: ArchiveFiles@2
          displayName: Publishing Stress Test
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/testing/jmeter'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-stress-test.zip'
            verbose: true
            
        - task: PublishPipelineArtifact@1
          displayName: Publishing Stress Test Logs
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-stress-test.zip'
            artifactName: 'drop-stress-test-logs'

        - bash: |
            apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/endurancetest.jmx \
                                        -l testing/jmeter/enduranceresults.csv \
                                        -e -f -o testing/jmeter \
                                        -j testing/jmeter/endurance-test.log
          displayName: JMeter Endurance Test
        - task: ArchiveFiles@2
          displayName: Publishing Endurance Test
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/testing/jmeter'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-endurance-test.zip'
            verbose: true

        - task: PublishPipelineArtifact@1
          displayName: Publishing Endurance Test Logs
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-endurance-test.zip'
            artifactName: 'drop-endurance-test-logs'
            
#--------------------------------------------#
# Selenium | Functional UI Tests
      - deployment: VMDeploy
        displayName: Selenium Tests
        environment:
          name: 'project3'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: drop-uitests
                patterns: '**/91-uitests.zip'
              - task: Bash@3
                inputs:
                  workingDirectory: $(Pipeline.Workspace)
                  targetType: 'inline'
                  script: |
                    #! /bin/bash
                    sudo rm -rf /usr/local/bin/geckodriver
                    sudo rm -rf drop-uitests/login.py
                    sudo apt upgrade
                    sudo apt install python3-pip
                    sudo apt install firefox
                    sudo pip3 install selenium
                    sudo pip3 install --upgrade requests
                    # Install Firefox Driver
                    wget https://github.com/mozilla/geckodriver/releases/download/v0.32.0/geckodriver-v0.32.0-linux64.tar.gz
                    tar -xvf geckodriver-v0.32.0-linux64.tar.gz
                    sudo mv geckodriver /usr/local/bin/
                    export PATH=$PATH:/usr/local/bin/geckodriver
                    # Run UI Test
                    cd drop-uitests
                    pwd
                    ls -la
                    sudo unzip 91-uitests.zip
                    python3 login.py
                    # ToDo: Direct the output of the Selenium Test Suite to a log file
